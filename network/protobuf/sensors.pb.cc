// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensors.proto

#include "sensors.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_sensors_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AmurSensors_Accelerometer_sensors_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sensors_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AmurSensors_Gyroscope_sensors_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sensors_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AmurSensors_HandEncoders_sensors_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sensors_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AmurSensors_Magnitometer_sensors_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sensors_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AmurSensors_Misc_sensors_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sensors_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AmurSensors_Temperature_sensors_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sensors_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AmurSensors_WheelEncoders_sensors_2eproto;
class AmurSensors_AccelerometerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AmurSensors_Accelerometer> _instance;
} _AmurSensors_Accelerometer_default_instance_;
class AmurSensors_GyroscopeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AmurSensors_Gyroscope> _instance;
} _AmurSensors_Gyroscope_default_instance_;
class AmurSensors_MagnitometerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AmurSensors_Magnitometer> _instance;
} _AmurSensors_Magnitometer_default_instance_;
class AmurSensors_WheelEncodersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AmurSensors_WheelEncoders> _instance;
} _AmurSensors_WheelEncoders_default_instance_;
class AmurSensors_HandEncodersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AmurSensors_HandEncoders> _instance;
} _AmurSensors_HandEncoders_default_instance_;
class AmurSensors_TemperatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AmurSensors_Temperature> _instance;
} _AmurSensors_Temperature_default_instance_;
class AmurSensors_WheelCurrentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AmurSensors_WheelCurrent> _instance;
} _AmurSensors_WheelCurrent_default_instance_;
class AmurSensors_HandCurrentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AmurSensors_HandCurrent> _instance;
} _AmurSensors_HandCurrent_default_instance_;
class AmurSensors_MiscDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AmurSensors_Misc> _instance;
} _AmurSensors_Misc_default_instance_;
class AmurSensorsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AmurSensors> _instance;
} _AmurSensors_default_instance_;
static void InitDefaultsscc_info_AmurSensors_sensors_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AmurSensors_default_instance_;
    new (ptr) ::AmurSensors();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AmurSensors::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_AmurSensors_sensors_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_AmurSensors_sensors_2eproto}, {
      &scc_info_AmurSensors_Accelerometer_sensors_2eproto.base,
      &scc_info_AmurSensors_Gyroscope_sensors_2eproto.base,
      &scc_info_AmurSensors_Magnitometer_sensors_2eproto.base,
      &scc_info_AmurSensors_WheelEncoders_sensors_2eproto.base,
      &scc_info_AmurSensors_HandEncoders_sensors_2eproto.base,
      &scc_info_AmurSensors_Temperature_sensors_2eproto.base,
      &scc_info_AmurSensors_Misc_sensors_2eproto.base,}};

static void InitDefaultsscc_info_AmurSensors_Accelerometer_sensors_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AmurSensors_Accelerometer_default_instance_;
    new (ptr) ::AmurSensors_Accelerometer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AmurSensors_Accelerometer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AmurSensors_Accelerometer_sensors_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AmurSensors_Accelerometer_sensors_2eproto}, {}};

static void InitDefaultsscc_info_AmurSensors_Gyroscope_sensors_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AmurSensors_Gyroscope_default_instance_;
    new (ptr) ::AmurSensors_Gyroscope();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AmurSensors_Gyroscope::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AmurSensors_Gyroscope_sensors_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AmurSensors_Gyroscope_sensors_2eproto}, {}};

static void InitDefaultsscc_info_AmurSensors_HandCurrent_sensors_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AmurSensors_HandCurrent_default_instance_;
    new (ptr) ::AmurSensors_HandCurrent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AmurSensors_HandCurrent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AmurSensors_HandCurrent_sensors_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AmurSensors_HandCurrent_sensors_2eproto}, {}};

static void InitDefaultsscc_info_AmurSensors_HandEncoders_sensors_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AmurSensors_HandEncoders_default_instance_;
    new (ptr) ::AmurSensors_HandEncoders();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AmurSensors_HandEncoders::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AmurSensors_HandEncoders_sensors_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AmurSensors_HandEncoders_sensors_2eproto}, {}};

static void InitDefaultsscc_info_AmurSensors_Magnitometer_sensors_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AmurSensors_Magnitometer_default_instance_;
    new (ptr) ::AmurSensors_Magnitometer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AmurSensors_Magnitometer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AmurSensors_Magnitometer_sensors_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AmurSensors_Magnitometer_sensors_2eproto}, {}};

static void InitDefaultsscc_info_AmurSensors_Misc_sensors_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AmurSensors_Misc_default_instance_;
    new (ptr) ::AmurSensors_Misc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AmurSensors_Misc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AmurSensors_Misc_sensors_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AmurSensors_Misc_sensors_2eproto}, {}};

static void InitDefaultsscc_info_AmurSensors_Temperature_sensors_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AmurSensors_Temperature_default_instance_;
    new (ptr) ::AmurSensors_Temperature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AmurSensors_Temperature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AmurSensors_Temperature_sensors_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AmurSensors_Temperature_sensors_2eproto}, {}};

static void InitDefaultsscc_info_AmurSensors_WheelCurrent_sensors_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AmurSensors_WheelCurrent_default_instance_;
    new (ptr) ::AmurSensors_WheelCurrent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AmurSensors_WheelCurrent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AmurSensors_WheelCurrent_sensors_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AmurSensors_WheelCurrent_sensors_2eproto}, {}};

static void InitDefaultsscc_info_AmurSensors_WheelEncoders_sensors_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AmurSensors_WheelEncoders_default_instance_;
    new (ptr) ::AmurSensors_WheelEncoders();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AmurSensors_WheelEncoders::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AmurSensors_WheelEncoders_sensors_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AmurSensors_WheelEncoders_sensors_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sensors_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_sensors_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sensors_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_sensors_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AmurSensors_Accelerometer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AmurSensors_Accelerometer, x_),
  PROTOBUF_FIELD_OFFSET(::AmurSensors_Accelerometer, y_),
  PROTOBUF_FIELD_OFFSET(::AmurSensors_Accelerometer, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AmurSensors_Gyroscope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AmurSensors_Gyroscope, x_),
  PROTOBUF_FIELD_OFFSET(::AmurSensors_Gyroscope, y_),
  PROTOBUF_FIELD_OFFSET(::AmurSensors_Gyroscope, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AmurSensors_Magnitometer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AmurSensors_Magnitometer, x_),
  PROTOBUF_FIELD_OFFSET(::AmurSensors_Magnitometer, y_),
  PROTOBUF_FIELD_OFFSET(::AmurSensors_Magnitometer, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AmurSensors_WheelEncoders, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AmurSensors_WheelEncoders, leftangle_),
  PROTOBUF_FIELD_OFFSET(::AmurSensors_WheelEncoders, rightangle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AmurSensors_HandEncoders, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AmurSensors_HandEncoders, leftinternalangle_),
  PROTOBUF_FIELD_OFFSET(::AmurSensors_HandEncoders, rightinternalangle_),
  PROTOBUF_FIELD_OFFSET(::AmurSensors_HandEncoders, leftouterangle_),
  PROTOBUF_FIELD_OFFSET(::AmurSensors_HandEncoders, rightouterangle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AmurSensors_Temperature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AmurSensors_Temperature, tempaccelerometer_),
  PROTOBUF_FIELD_OFFSET(::AmurSensors_Temperature, tempcpu_),
  PROTOBUF_FIELD_OFFSET(::AmurSensors_Temperature, temppressure_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AmurSensors_WheelCurrent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AmurSensors_WheelCurrent, leftcurrent_),
  PROTOBUF_FIELD_OFFSET(::AmurSensors_WheelCurrent, rightcurrent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AmurSensors_HandCurrent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AmurSensors_HandCurrent, leftcurrent_),
  PROTOBUF_FIELD_OFFSET(::AmurSensors_HandCurrent, rightcurrent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AmurSensors_Misc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AmurSensors_Misc, gas_),
  PROTOBUF_FIELD_OFFSET(::AmurSensors_Misc, batteryvoltage_),
  PROTOBUF_FIELD_OFFSET(::AmurSensors_Misc, raspberryvoltage_),
  PROTOBUF_FIELD_OFFSET(::AmurSensors_Misc, pressure_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AmurSensors, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AmurSensors, accelerometer_),
  PROTOBUF_FIELD_OFFSET(::AmurSensors, gyroscope_),
  PROTOBUF_FIELD_OFFSET(::AmurSensors, magnitometer_),
  PROTOBUF_FIELD_OFFSET(::AmurSensors, wheelencoders_),
  PROTOBUF_FIELD_OFFSET(::AmurSensors, handencoders_),
  PROTOBUF_FIELD_OFFSET(::AmurSensors, temperature_),
  PROTOBUF_FIELD_OFFSET(::AmurSensors, misc_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::AmurSensors_Accelerometer)},
  { 8, -1, sizeof(::AmurSensors_Gyroscope)},
  { 16, -1, sizeof(::AmurSensors_Magnitometer)},
  { 24, -1, sizeof(::AmurSensors_WheelEncoders)},
  { 31, -1, sizeof(::AmurSensors_HandEncoders)},
  { 40, -1, sizeof(::AmurSensors_Temperature)},
  { 48, -1, sizeof(::AmurSensors_WheelCurrent)},
  { 55, -1, sizeof(::AmurSensors_HandCurrent)},
  { 62, -1, sizeof(::AmurSensors_Misc)},
  { 71, -1, sizeof(::AmurSensors)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AmurSensors_Accelerometer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AmurSensors_Gyroscope_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AmurSensors_Magnitometer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AmurSensors_WheelEncoders_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AmurSensors_HandEncoders_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AmurSensors_Temperature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AmurSensors_WheelCurrent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AmurSensors_HandCurrent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AmurSensors_Misc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AmurSensors_default_instance_),
};

const char descriptor_table_protodef_sensors_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rsensors.proto\"\260\007\n\013AmurSensors\0221\n\raccel"
  "erometer\030\001 \001(\0132\032.AmurSensors.Acceleromet"
  "er\022)\n\tgyroscope\030\002 \001(\0132\026.AmurSensors.Gyro"
  "scope\022/\n\014magnitometer\030\003 \001(\0132\031.AmurSensor"
  "s.Magnitometer\0221\n\rwheelEncoders\030\004 \001(\0132\032."
  "AmurSensors.WheelEncoders\022/\n\014handEncoder"
  "s\030\005 \001(\0132\031.AmurSensors.HandEncoders\022-\n\013te"
  "mperature\030\006 \001(\0132\030.AmurSensors.Temperatur"
  "e\022\037\n\004misc\030\007 \001(\0132\021.AmurSensors.Misc\0320\n\rAc"
  "celerometer\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003"
  " \001(\002\032,\n\tGyroscope\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022"
  "\t\n\001z\030\003 \001(\002\032/\n\014Magnitometer\022\t\n\001x\030\001 \001(\002\022\t\n"
  "\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\0326\n\rWheelEncoders\022\021\n\t"
  "leftAngle\030\001 \001(\005\022\022\n\nrightAngle\030\002 \001(\005\032v\n\014H"
  "andEncoders\022\031\n\021leftInternalAngle\030\001 \001(\005\022\032"
  "\n\022rightInternalAngle\030\002 \001(\005\022\026\n\016leftOuterA"
  "ngle\030\003 \001(\005\022\027\n\017rightOuterAngle\030\004 \001(\005\032O\n\013T"
  "emperature\022\031\n\021tempAccelerometer\030\001 \001(\005\022\017\n"
  "\007tempCPU\030\002 \001(\005\022\024\n\014tempPressure\030\003 \001(\005\0329\n\014"
  "WheelCurrent\022\023\n\013leftCurrent\030\001 \001(\005\022\024\n\014rig"
  "htCurrent\030\002 \001(\005\0328\n\013HandCurrent\022\023\n\013leftCu"
  "rrent\030\001 \001(\005\022\024\n\014rightCurrent\030\002 \001(\005\032W\n\004Mis"
  "c\022\013\n\003gas\030\001 \001(\005\022\026\n\016batteryVoltage\030\002 \001(\005\022\030"
  "\n\020raspberryVoltage\030\003 \001(\005\022\020\n\010pressure\030\004 \001"
  "(\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sensors_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_sensors_2eproto_sccs[10] = {
  &scc_info_AmurSensors_sensors_2eproto.base,
  &scc_info_AmurSensors_Accelerometer_sensors_2eproto.base,
  &scc_info_AmurSensors_Gyroscope_sensors_2eproto.base,
  &scc_info_AmurSensors_HandCurrent_sensors_2eproto.base,
  &scc_info_AmurSensors_HandEncoders_sensors_2eproto.base,
  &scc_info_AmurSensors_Magnitometer_sensors_2eproto.base,
  &scc_info_AmurSensors_Misc_sensors_2eproto.base,
  &scc_info_AmurSensors_Temperature_sensors_2eproto.base,
  &scc_info_AmurSensors_WheelCurrent_sensors_2eproto.base,
  &scc_info_AmurSensors_WheelEncoders_sensors_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sensors_2eproto_once;
static bool descriptor_table_sensors_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sensors_2eproto = {
  &descriptor_table_sensors_2eproto_initialized, descriptor_table_protodef_sensors_2eproto, "sensors.proto", 970,
  &descriptor_table_sensors_2eproto_once, descriptor_table_sensors_2eproto_sccs, descriptor_table_sensors_2eproto_deps, 10, 0,
  schemas, file_default_instances, TableStruct_sensors_2eproto::offsets,
  file_level_metadata_sensors_2eproto, 10, file_level_enum_descriptors_sensors_2eproto, file_level_service_descriptors_sensors_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_sensors_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_sensors_2eproto), true);

// ===================================================================

void AmurSensors_Accelerometer::InitAsDefaultInstance() {
}
class AmurSensors_Accelerometer::_Internal {
 public:
};

AmurSensors_Accelerometer::AmurSensors_Accelerometer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AmurSensors.Accelerometer)
}
AmurSensors_Accelerometer::AmurSensors_Accelerometer(const AmurSensors_Accelerometer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:AmurSensors.Accelerometer)
}

void AmurSensors_Accelerometer::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

AmurSensors_Accelerometer::~AmurSensors_Accelerometer() {
  // @@protoc_insertion_point(destructor:AmurSensors.Accelerometer)
  SharedDtor();
}

void AmurSensors_Accelerometer::SharedDtor() {
}

void AmurSensors_Accelerometer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AmurSensors_Accelerometer& AmurSensors_Accelerometer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AmurSensors_Accelerometer_sensors_2eproto.base);
  return *internal_default_instance();
}


void AmurSensors_Accelerometer::Clear() {
// @@protoc_insertion_point(message_clear_start:AmurSensors.Accelerometer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

const char* AmurSensors_Accelerometer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AmurSensors_Accelerometer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AmurSensors.Accelerometer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AmurSensors.Accelerometer)
  return target;
}

size_t AmurSensors_Accelerometer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AmurSensors.Accelerometer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AmurSensors_Accelerometer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AmurSensors.Accelerometer)
  GOOGLE_DCHECK_NE(&from, this);
  const AmurSensors_Accelerometer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AmurSensors_Accelerometer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AmurSensors.Accelerometer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AmurSensors.Accelerometer)
    MergeFrom(*source);
  }
}

void AmurSensors_Accelerometer::MergeFrom(const AmurSensors_Accelerometer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AmurSensors.Accelerometer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void AmurSensors_Accelerometer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AmurSensors.Accelerometer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AmurSensors_Accelerometer::CopyFrom(const AmurSensors_Accelerometer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AmurSensors.Accelerometer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AmurSensors_Accelerometer::IsInitialized() const {
  return true;
}

void AmurSensors_Accelerometer::InternalSwap(AmurSensors_Accelerometer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AmurSensors_Accelerometer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AmurSensors_Gyroscope::InitAsDefaultInstance() {
}
class AmurSensors_Gyroscope::_Internal {
 public:
};

AmurSensors_Gyroscope::AmurSensors_Gyroscope()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AmurSensors.Gyroscope)
}
AmurSensors_Gyroscope::AmurSensors_Gyroscope(const AmurSensors_Gyroscope& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:AmurSensors.Gyroscope)
}

void AmurSensors_Gyroscope::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

AmurSensors_Gyroscope::~AmurSensors_Gyroscope() {
  // @@protoc_insertion_point(destructor:AmurSensors.Gyroscope)
  SharedDtor();
}

void AmurSensors_Gyroscope::SharedDtor() {
}

void AmurSensors_Gyroscope::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AmurSensors_Gyroscope& AmurSensors_Gyroscope::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AmurSensors_Gyroscope_sensors_2eproto.base);
  return *internal_default_instance();
}


void AmurSensors_Gyroscope::Clear() {
// @@protoc_insertion_point(message_clear_start:AmurSensors.Gyroscope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

const char* AmurSensors_Gyroscope::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AmurSensors_Gyroscope::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AmurSensors.Gyroscope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AmurSensors.Gyroscope)
  return target;
}

size_t AmurSensors_Gyroscope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AmurSensors.Gyroscope)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AmurSensors_Gyroscope::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AmurSensors.Gyroscope)
  GOOGLE_DCHECK_NE(&from, this);
  const AmurSensors_Gyroscope* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AmurSensors_Gyroscope>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AmurSensors.Gyroscope)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AmurSensors.Gyroscope)
    MergeFrom(*source);
  }
}

void AmurSensors_Gyroscope::MergeFrom(const AmurSensors_Gyroscope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AmurSensors.Gyroscope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void AmurSensors_Gyroscope::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AmurSensors.Gyroscope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AmurSensors_Gyroscope::CopyFrom(const AmurSensors_Gyroscope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AmurSensors.Gyroscope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AmurSensors_Gyroscope::IsInitialized() const {
  return true;
}

void AmurSensors_Gyroscope::InternalSwap(AmurSensors_Gyroscope* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AmurSensors_Gyroscope::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AmurSensors_Magnitometer::InitAsDefaultInstance() {
}
class AmurSensors_Magnitometer::_Internal {
 public:
};

AmurSensors_Magnitometer::AmurSensors_Magnitometer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AmurSensors.Magnitometer)
}
AmurSensors_Magnitometer::AmurSensors_Magnitometer(const AmurSensors_Magnitometer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:AmurSensors.Magnitometer)
}

void AmurSensors_Magnitometer::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

AmurSensors_Magnitometer::~AmurSensors_Magnitometer() {
  // @@protoc_insertion_point(destructor:AmurSensors.Magnitometer)
  SharedDtor();
}

void AmurSensors_Magnitometer::SharedDtor() {
}

void AmurSensors_Magnitometer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AmurSensors_Magnitometer& AmurSensors_Magnitometer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AmurSensors_Magnitometer_sensors_2eproto.base);
  return *internal_default_instance();
}


void AmurSensors_Magnitometer::Clear() {
// @@protoc_insertion_point(message_clear_start:AmurSensors.Magnitometer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

const char* AmurSensors_Magnitometer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AmurSensors_Magnitometer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AmurSensors.Magnitometer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AmurSensors.Magnitometer)
  return target;
}

size_t AmurSensors_Magnitometer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AmurSensors.Magnitometer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AmurSensors_Magnitometer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AmurSensors.Magnitometer)
  GOOGLE_DCHECK_NE(&from, this);
  const AmurSensors_Magnitometer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AmurSensors_Magnitometer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AmurSensors.Magnitometer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AmurSensors.Magnitometer)
    MergeFrom(*source);
  }
}

void AmurSensors_Magnitometer::MergeFrom(const AmurSensors_Magnitometer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AmurSensors.Magnitometer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void AmurSensors_Magnitometer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AmurSensors.Magnitometer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AmurSensors_Magnitometer::CopyFrom(const AmurSensors_Magnitometer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AmurSensors.Magnitometer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AmurSensors_Magnitometer::IsInitialized() const {
  return true;
}

void AmurSensors_Magnitometer::InternalSwap(AmurSensors_Magnitometer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AmurSensors_Magnitometer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AmurSensors_WheelEncoders::InitAsDefaultInstance() {
}
class AmurSensors_WheelEncoders::_Internal {
 public:
};

AmurSensors_WheelEncoders::AmurSensors_WheelEncoders()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AmurSensors.WheelEncoders)
}
AmurSensors_WheelEncoders::AmurSensors_WheelEncoders(const AmurSensors_WheelEncoders& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&leftangle_, &from.leftangle_,
    static_cast<size_t>(reinterpret_cast<char*>(&rightangle_) -
    reinterpret_cast<char*>(&leftangle_)) + sizeof(rightangle_));
  // @@protoc_insertion_point(copy_constructor:AmurSensors.WheelEncoders)
}

void AmurSensors_WheelEncoders::SharedCtor() {
  ::memset(&leftangle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rightangle_) -
      reinterpret_cast<char*>(&leftangle_)) + sizeof(rightangle_));
}

AmurSensors_WheelEncoders::~AmurSensors_WheelEncoders() {
  // @@protoc_insertion_point(destructor:AmurSensors.WheelEncoders)
  SharedDtor();
}

void AmurSensors_WheelEncoders::SharedDtor() {
}

void AmurSensors_WheelEncoders::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AmurSensors_WheelEncoders& AmurSensors_WheelEncoders::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AmurSensors_WheelEncoders_sensors_2eproto.base);
  return *internal_default_instance();
}


void AmurSensors_WheelEncoders::Clear() {
// @@protoc_insertion_point(message_clear_start:AmurSensors.WheelEncoders)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&leftangle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rightangle_) -
      reinterpret_cast<char*>(&leftangle_)) + sizeof(rightangle_));
  _internal_metadata_.Clear();
}

const char* AmurSensors_WheelEncoders::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 leftAngle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          leftangle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rightAngle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rightangle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AmurSensors_WheelEncoders::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AmurSensors.WheelEncoders)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 leftAngle = 1;
  if (this->leftangle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_leftangle(), target);
  }

  // int32 rightAngle = 2;
  if (this->rightangle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_rightangle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AmurSensors.WheelEncoders)
  return target;
}

size_t AmurSensors_WheelEncoders::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AmurSensors.WheelEncoders)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 leftAngle = 1;
  if (this->leftangle() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_leftangle());
  }

  // int32 rightAngle = 2;
  if (this->rightangle() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rightangle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AmurSensors_WheelEncoders::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AmurSensors.WheelEncoders)
  GOOGLE_DCHECK_NE(&from, this);
  const AmurSensors_WheelEncoders* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AmurSensors_WheelEncoders>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AmurSensors.WheelEncoders)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AmurSensors.WheelEncoders)
    MergeFrom(*source);
  }
}

void AmurSensors_WheelEncoders::MergeFrom(const AmurSensors_WheelEncoders& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AmurSensors.WheelEncoders)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.leftangle() != 0) {
    _internal_set_leftangle(from._internal_leftangle());
  }
  if (from.rightangle() != 0) {
    _internal_set_rightangle(from._internal_rightangle());
  }
}

void AmurSensors_WheelEncoders::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AmurSensors.WheelEncoders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AmurSensors_WheelEncoders::CopyFrom(const AmurSensors_WheelEncoders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AmurSensors.WheelEncoders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AmurSensors_WheelEncoders::IsInitialized() const {
  return true;
}

void AmurSensors_WheelEncoders::InternalSwap(AmurSensors_WheelEncoders* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(leftangle_, other->leftangle_);
  swap(rightangle_, other->rightangle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AmurSensors_WheelEncoders::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AmurSensors_HandEncoders::InitAsDefaultInstance() {
}
class AmurSensors_HandEncoders::_Internal {
 public:
};

AmurSensors_HandEncoders::AmurSensors_HandEncoders()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AmurSensors.HandEncoders)
}
AmurSensors_HandEncoders::AmurSensors_HandEncoders(const AmurSensors_HandEncoders& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&leftinternalangle_, &from.leftinternalangle_,
    static_cast<size_t>(reinterpret_cast<char*>(&rightouterangle_) -
    reinterpret_cast<char*>(&leftinternalangle_)) + sizeof(rightouterangle_));
  // @@protoc_insertion_point(copy_constructor:AmurSensors.HandEncoders)
}

void AmurSensors_HandEncoders::SharedCtor() {
  ::memset(&leftinternalangle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rightouterangle_) -
      reinterpret_cast<char*>(&leftinternalangle_)) + sizeof(rightouterangle_));
}

AmurSensors_HandEncoders::~AmurSensors_HandEncoders() {
  // @@protoc_insertion_point(destructor:AmurSensors.HandEncoders)
  SharedDtor();
}

void AmurSensors_HandEncoders::SharedDtor() {
}

void AmurSensors_HandEncoders::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AmurSensors_HandEncoders& AmurSensors_HandEncoders::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AmurSensors_HandEncoders_sensors_2eproto.base);
  return *internal_default_instance();
}


void AmurSensors_HandEncoders::Clear() {
// @@protoc_insertion_point(message_clear_start:AmurSensors.HandEncoders)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&leftinternalangle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rightouterangle_) -
      reinterpret_cast<char*>(&leftinternalangle_)) + sizeof(rightouterangle_));
  _internal_metadata_.Clear();
}

const char* AmurSensors_HandEncoders::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 leftInternalAngle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          leftinternalangle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rightInternalAngle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rightinternalangle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 leftOuterAngle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          leftouterangle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rightOuterAngle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          rightouterangle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AmurSensors_HandEncoders::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AmurSensors.HandEncoders)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 leftInternalAngle = 1;
  if (this->leftinternalangle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_leftinternalangle(), target);
  }

  // int32 rightInternalAngle = 2;
  if (this->rightinternalangle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_rightinternalangle(), target);
  }

  // int32 leftOuterAngle = 3;
  if (this->leftouterangle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_leftouterangle(), target);
  }

  // int32 rightOuterAngle = 4;
  if (this->rightouterangle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_rightouterangle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AmurSensors.HandEncoders)
  return target;
}

size_t AmurSensors_HandEncoders::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AmurSensors.HandEncoders)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 leftInternalAngle = 1;
  if (this->leftinternalangle() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_leftinternalangle());
  }

  // int32 rightInternalAngle = 2;
  if (this->rightinternalangle() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rightinternalangle());
  }

  // int32 leftOuterAngle = 3;
  if (this->leftouterangle() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_leftouterangle());
  }

  // int32 rightOuterAngle = 4;
  if (this->rightouterangle() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rightouterangle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AmurSensors_HandEncoders::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AmurSensors.HandEncoders)
  GOOGLE_DCHECK_NE(&from, this);
  const AmurSensors_HandEncoders* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AmurSensors_HandEncoders>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AmurSensors.HandEncoders)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AmurSensors.HandEncoders)
    MergeFrom(*source);
  }
}

void AmurSensors_HandEncoders::MergeFrom(const AmurSensors_HandEncoders& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AmurSensors.HandEncoders)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.leftinternalangle() != 0) {
    _internal_set_leftinternalangle(from._internal_leftinternalangle());
  }
  if (from.rightinternalangle() != 0) {
    _internal_set_rightinternalangle(from._internal_rightinternalangle());
  }
  if (from.leftouterangle() != 0) {
    _internal_set_leftouterangle(from._internal_leftouterangle());
  }
  if (from.rightouterangle() != 0) {
    _internal_set_rightouterangle(from._internal_rightouterangle());
  }
}

void AmurSensors_HandEncoders::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AmurSensors.HandEncoders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AmurSensors_HandEncoders::CopyFrom(const AmurSensors_HandEncoders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AmurSensors.HandEncoders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AmurSensors_HandEncoders::IsInitialized() const {
  return true;
}

void AmurSensors_HandEncoders::InternalSwap(AmurSensors_HandEncoders* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(leftinternalangle_, other->leftinternalangle_);
  swap(rightinternalangle_, other->rightinternalangle_);
  swap(leftouterangle_, other->leftouterangle_);
  swap(rightouterangle_, other->rightouterangle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AmurSensors_HandEncoders::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AmurSensors_Temperature::InitAsDefaultInstance() {
}
class AmurSensors_Temperature::_Internal {
 public:
};

AmurSensors_Temperature::AmurSensors_Temperature()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AmurSensors.Temperature)
}
AmurSensors_Temperature::AmurSensors_Temperature(const AmurSensors_Temperature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tempaccelerometer_, &from.tempaccelerometer_,
    static_cast<size_t>(reinterpret_cast<char*>(&temppressure_) -
    reinterpret_cast<char*>(&tempaccelerometer_)) + sizeof(temppressure_));
  // @@protoc_insertion_point(copy_constructor:AmurSensors.Temperature)
}

void AmurSensors_Temperature::SharedCtor() {
  ::memset(&tempaccelerometer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&temppressure_) -
      reinterpret_cast<char*>(&tempaccelerometer_)) + sizeof(temppressure_));
}

AmurSensors_Temperature::~AmurSensors_Temperature() {
  // @@protoc_insertion_point(destructor:AmurSensors.Temperature)
  SharedDtor();
}

void AmurSensors_Temperature::SharedDtor() {
}

void AmurSensors_Temperature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AmurSensors_Temperature& AmurSensors_Temperature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AmurSensors_Temperature_sensors_2eproto.base);
  return *internal_default_instance();
}


void AmurSensors_Temperature::Clear() {
// @@protoc_insertion_point(message_clear_start:AmurSensors.Temperature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&tempaccelerometer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&temppressure_) -
      reinterpret_cast<char*>(&tempaccelerometer_)) + sizeof(temppressure_));
  _internal_metadata_.Clear();
}

const char* AmurSensors_Temperature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 tempAccelerometer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          tempaccelerometer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tempCPU = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tempcpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tempPressure = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          temppressure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AmurSensors_Temperature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AmurSensors.Temperature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 tempAccelerometer = 1;
  if (this->tempaccelerometer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_tempaccelerometer(), target);
  }

  // int32 tempCPU = 2;
  if (this->tempcpu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_tempcpu(), target);
  }

  // int32 tempPressure = 3;
  if (this->temppressure() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_temppressure(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AmurSensors.Temperature)
  return target;
}

size_t AmurSensors_Temperature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AmurSensors.Temperature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 tempAccelerometer = 1;
  if (this->tempaccelerometer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tempaccelerometer());
  }

  // int32 tempCPU = 2;
  if (this->tempcpu() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tempcpu());
  }

  // int32 tempPressure = 3;
  if (this->temppressure() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_temppressure());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AmurSensors_Temperature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AmurSensors.Temperature)
  GOOGLE_DCHECK_NE(&from, this);
  const AmurSensors_Temperature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AmurSensors_Temperature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AmurSensors.Temperature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AmurSensors.Temperature)
    MergeFrom(*source);
  }
}

void AmurSensors_Temperature::MergeFrom(const AmurSensors_Temperature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AmurSensors.Temperature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tempaccelerometer() != 0) {
    _internal_set_tempaccelerometer(from._internal_tempaccelerometer());
  }
  if (from.tempcpu() != 0) {
    _internal_set_tempcpu(from._internal_tempcpu());
  }
  if (from.temppressure() != 0) {
    _internal_set_temppressure(from._internal_temppressure());
  }
}

void AmurSensors_Temperature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AmurSensors.Temperature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AmurSensors_Temperature::CopyFrom(const AmurSensors_Temperature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AmurSensors.Temperature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AmurSensors_Temperature::IsInitialized() const {
  return true;
}

void AmurSensors_Temperature::InternalSwap(AmurSensors_Temperature* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(tempaccelerometer_, other->tempaccelerometer_);
  swap(tempcpu_, other->tempcpu_);
  swap(temppressure_, other->temppressure_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AmurSensors_Temperature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AmurSensors_WheelCurrent::InitAsDefaultInstance() {
}
class AmurSensors_WheelCurrent::_Internal {
 public:
};

AmurSensors_WheelCurrent::AmurSensors_WheelCurrent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AmurSensors.WheelCurrent)
}
AmurSensors_WheelCurrent::AmurSensors_WheelCurrent(const AmurSensors_WheelCurrent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&leftcurrent_, &from.leftcurrent_,
    static_cast<size_t>(reinterpret_cast<char*>(&rightcurrent_) -
    reinterpret_cast<char*>(&leftcurrent_)) + sizeof(rightcurrent_));
  // @@protoc_insertion_point(copy_constructor:AmurSensors.WheelCurrent)
}

void AmurSensors_WheelCurrent::SharedCtor() {
  ::memset(&leftcurrent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rightcurrent_) -
      reinterpret_cast<char*>(&leftcurrent_)) + sizeof(rightcurrent_));
}

AmurSensors_WheelCurrent::~AmurSensors_WheelCurrent() {
  // @@protoc_insertion_point(destructor:AmurSensors.WheelCurrent)
  SharedDtor();
}

void AmurSensors_WheelCurrent::SharedDtor() {
}

void AmurSensors_WheelCurrent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AmurSensors_WheelCurrent& AmurSensors_WheelCurrent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AmurSensors_WheelCurrent_sensors_2eproto.base);
  return *internal_default_instance();
}


void AmurSensors_WheelCurrent::Clear() {
// @@protoc_insertion_point(message_clear_start:AmurSensors.WheelCurrent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&leftcurrent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rightcurrent_) -
      reinterpret_cast<char*>(&leftcurrent_)) + sizeof(rightcurrent_));
  _internal_metadata_.Clear();
}

const char* AmurSensors_WheelCurrent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 leftCurrent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          leftcurrent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rightCurrent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rightcurrent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AmurSensors_WheelCurrent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AmurSensors.WheelCurrent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 leftCurrent = 1;
  if (this->leftcurrent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_leftcurrent(), target);
  }

  // int32 rightCurrent = 2;
  if (this->rightcurrent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_rightcurrent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AmurSensors.WheelCurrent)
  return target;
}

size_t AmurSensors_WheelCurrent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AmurSensors.WheelCurrent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 leftCurrent = 1;
  if (this->leftcurrent() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_leftcurrent());
  }

  // int32 rightCurrent = 2;
  if (this->rightcurrent() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rightcurrent());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AmurSensors_WheelCurrent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AmurSensors.WheelCurrent)
  GOOGLE_DCHECK_NE(&from, this);
  const AmurSensors_WheelCurrent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AmurSensors_WheelCurrent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AmurSensors.WheelCurrent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AmurSensors.WheelCurrent)
    MergeFrom(*source);
  }
}

void AmurSensors_WheelCurrent::MergeFrom(const AmurSensors_WheelCurrent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AmurSensors.WheelCurrent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.leftcurrent() != 0) {
    _internal_set_leftcurrent(from._internal_leftcurrent());
  }
  if (from.rightcurrent() != 0) {
    _internal_set_rightcurrent(from._internal_rightcurrent());
  }
}

void AmurSensors_WheelCurrent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AmurSensors.WheelCurrent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AmurSensors_WheelCurrent::CopyFrom(const AmurSensors_WheelCurrent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AmurSensors.WheelCurrent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AmurSensors_WheelCurrent::IsInitialized() const {
  return true;
}

void AmurSensors_WheelCurrent::InternalSwap(AmurSensors_WheelCurrent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(leftcurrent_, other->leftcurrent_);
  swap(rightcurrent_, other->rightcurrent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AmurSensors_WheelCurrent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AmurSensors_HandCurrent::InitAsDefaultInstance() {
}
class AmurSensors_HandCurrent::_Internal {
 public:
};

AmurSensors_HandCurrent::AmurSensors_HandCurrent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AmurSensors.HandCurrent)
}
AmurSensors_HandCurrent::AmurSensors_HandCurrent(const AmurSensors_HandCurrent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&leftcurrent_, &from.leftcurrent_,
    static_cast<size_t>(reinterpret_cast<char*>(&rightcurrent_) -
    reinterpret_cast<char*>(&leftcurrent_)) + sizeof(rightcurrent_));
  // @@protoc_insertion_point(copy_constructor:AmurSensors.HandCurrent)
}

void AmurSensors_HandCurrent::SharedCtor() {
  ::memset(&leftcurrent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rightcurrent_) -
      reinterpret_cast<char*>(&leftcurrent_)) + sizeof(rightcurrent_));
}

AmurSensors_HandCurrent::~AmurSensors_HandCurrent() {
  // @@protoc_insertion_point(destructor:AmurSensors.HandCurrent)
  SharedDtor();
}

void AmurSensors_HandCurrent::SharedDtor() {
}

void AmurSensors_HandCurrent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AmurSensors_HandCurrent& AmurSensors_HandCurrent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AmurSensors_HandCurrent_sensors_2eproto.base);
  return *internal_default_instance();
}


void AmurSensors_HandCurrent::Clear() {
// @@protoc_insertion_point(message_clear_start:AmurSensors.HandCurrent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&leftcurrent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rightcurrent_) -
      reinterpret_cast<char*>(&leftcurrent_)) + sizeof(rightcurrent_));
  _internal_metadata_.Clear();
}

const char* AmurSensors_HandCurrent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 leftCurrent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          leftcurrent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rightCurrent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rightcurrent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AmurSensors_HandCurrent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AmurSensors.HandCurrent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 leftCurrent = 1;
  if (this->leftcurrent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_leftcurrent(), target);
  }

  // int32 rightCurrent = 2;
  if (this->rightcurrent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_rightcurrent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AmurSensors.HandCurrent)
  return target;
}

size_t AmurSensors_HandCurrent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AmurSensors.HandCurrent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 leftCurrent = 1;
  if (this->leftcurrent() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_leftcurrent());
  }

  // int32 rightCurrent = 2;
  if (this->rightcurrent() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rightcurrent());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AmurSensors_HandCurrent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AmurSensors.HandCurrent)
  GOOGLE_DCHECK_NE(&from, this);
  const AmurSensors_HandCurrent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AmurSensors_HandCurrent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AmurSensors.HandCurrent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AmurSensors.HandCurrent)
    MergeFrom(*source);
  }
}

void AmurSensors_HandCurrent::MergeFrom(const AmurSensors_HandCurrent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AmurSensors.HandCurrent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.leftcurrent() != 0) {
    _internal_set_leftcurrent(from._internal_leftcurrent());
  }
  if (from.rightcurrent() != 0) {
    _internal_set_rightcurrent(from._internal_rightcurrent());
  }
}

void AmurSensors_HandCurrent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AmurSensors.HandCurrent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AmurSensors_HandCurrent::CopyFrom(const AmurSensors_HandCurrent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AmurSensors.HandCurrent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AmurSensors_HandCurrent::IsInitialized() const {
  return true;
}

void AmurSensors_HandCurrent::InternalSwap(AmurSensors_HandCurrent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(leftcurrent_, other->leftcurrent_);
  swap(rightcurrent_, other->rightcurrent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AmurSensors_HandCurrent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AmurSensors_Misc::InitAsDefaultInstance() {
}
class AmurSensors_Misc::_Internal {
 public:
};

AmurSensors_Misc::AmurSensors_Misc()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AmurSensors.Misc)
}
AmurSensors_Misc::AmurSensors_Misc(const AmurSensors_Misc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gas_, &from.gas_,
    static_cast<size_t>(reinterpret_cast<char*>(&pressure_) -
    reinterpret_cast<char*>(&gas_)) + sizeof(pressure_));
  // @@protoc_insertion_point(copy_constructor:AmurSensors.Misc)
}

void AmurSensors_Misc::SharedCtor() {
  ::memset(&gas_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pressure_) -
      reinterpret_cast<char*>(&gas_)) + sizeof(pressure_));
}

AmurSensors_Misc::~AmurSensors_Misc() {
  // @@protoc_insertion_point(destructor:AmurSensors.Misc)
  SharedDtor();
}

void AmurSensors_Misc::SharedDtor() {
}

void AmurSensors_Misc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AmurSensors_Misc& AmurSensors_Misc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AmurSensors_Misc_sensors_2eproto.base);
  return *internal_default_instance();
}


void AmurSensors_Misc::Clear() {
// @@protoc_insertion_point(message_clear_start:AmurSensors.Misc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gas_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pressure_) -
      reinterpret_cast<char*>(&gas_)) + sizeof(pressure_));
  _internal_metadata_.Clear();
}

const char* AmurSensors_Misc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 gas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 batteryVoltage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          batteryvoltage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 raspberryVoltage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          raspberryvoltage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float pressure = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          pressure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AmurSensors_Misc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AmurSensors.Misc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gas = 1;
  if (this->gas() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_gas(), target);
  }

  // int32 batteryVoltage = 2;
  if (this->batteryvoltage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_batteryvoltage(), target);
  }

  // int32 raspberryVoltage = 3;
  if (this->raspberryvoltage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_raspberryvoltage(), target);
  }

  // float pressure = 4;
  if (!(this->pressure() <= 0 && this->pressure() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_pressure(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AmurSensors.Misc)
  return target;
}

size_t AmurSensors_Misc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AmurSensors.Misc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 gas = 1;
  if (this->gas() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gas());
  }

  // int32 batteryVoltage = 2;
  if (this->batteryvoltage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_batteryvoltage());
  }

  // int32 raspberryVoltage = 3;
  if (this->raspberryvoltage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_raspberryvoltage());
  }

  // float pressure = 4;
  if (!(this->pressure() <= 0 && this->pressure() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AmurSensors_Misc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AmurSensors.Misc)
  GOOGLE_DCHECK_NE(&from, this);
  const AmurSensors_Misc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AmurSensors_Misc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AmurSensors.Misc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AmurSensors.Misc)
    MergeFrom(*source);
  }
}

void AmurSensors_Misc::MergeFrom(const AmurSensors_Misc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AmurSensors.Misc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gas() != 0) {
    _internal_set_gas(from._internal_gas());
  }
  if (from.batteryvoltage() != 0) {
    _internal_set_batteryvoltage(from._internal_batteryvoltage());
  }
  if (from.raspberryvoltage() != 0) {
    _internal_set_raspberryvoltage(from._internal_raspberryvoltage());
  }
  if (!(from.pressure() <= 0 && from.pressure() >= 0)) {
    _internal_set_pressure(from._internal_pressure());
  }
}

void AmurSensors_Misc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AmurSensors.Misc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AmurSensors_Misc::CopyFrom(const AmurSensors_Misc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AmurSensors.Misc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AmurSensors_Misc::IsInitialized() const {
  return true;
}

void AmurSensors_Misc::InternalSwap(AmurSensors_Misc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(gas_, other->gas_);
  swap(batteryvoltage_, other->batteryvoltage_);
  swap(raspberryvoltage_, other->raspberryvoltage_);
  swap(pressure_, other->pressure_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AmurSensors_Misc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AmurSensors::InitAsDefaultInstance() {
  ::_AmurSensors_default_instance_._instance.get_mutable()->accelerometer_ = const_cast< ::AmurSensors_Accelerometer*>(
      ::AmurSensors_Accelerometer::internal_default_instance());
  ::_AmurSensors_default_instance_._instance.get_mutable()->gyroscope_ = const_cast< ::AmurSensors_Gyroscope*>(
      ::AmurSensors_Gyroscope::internal_default_instance());
  ::_AmurSensors_default_instance_._instance.get_mutable()->magnitometer_ = const_cast< ::AmurSensors_Magnitometer*>(
      ::AmurSensors_Magnitometer::internal_default_instance());
  ::_AmurSensors_default_instance_._instance.get_mutable()->wheelencoders_ = const_cast< ::AmurSensors_WheelEncoders*>(
      ::AmurSensors_WheelEncoders::internal_default_instance());
  ::_AmurSensors_default_instance_._instance.get_mutable()->handencoders_ = const_cast< ::AmurSensors_HandEncoders*>(
      ::AmurSensors_HandEncoders::internal_default_instance());
  ::_AmurSensors_default_instance_._instance.get_mutable()->temperature_ = const_cast< ::AmurSensors_Temperature*>(
      ::AmurSensors_Temperature::internal_default_instance());
  ::_AmurSensors_default_instance_._instance.get_mutable()->misc_ = const_cast< ::AmurSensors_Misc*>(
      ::AmurSensors_Misc::internal_default_instance());
}
class AmurSensors::_Internal {
 public:
  static const ::AmurSensors_Accelerometer& accelerometer(const AmurSensors* msg);
  static const ::AmurSensors_Gyroscope& gyroscope(const AmurSensors* msg);
  static const ::AmurSensors_Magnitometer& magnitometer(const AmurSensors* msg);
  static const ::AmurSensors_WheelEncoders& wheelencoders(const AmurSensors* msg);
  static const ::AmurSensors_HandEncoders& handencoders(const AmurSensors* msg);
  static const ::AmurSensors_Temperature& temperature(const AmurSensors* msg);
  static const ::AmurSensors_Misc& misc(const AmurSensors* msg);
};

const ::AmurSensors_Accelerometer&
AmurSensors::_Internal::accelerometer(const AmurSensors* msg) {
  return *msg->accelerometer_;
}
const ::AmurSensors_Gyroscope&
AmurSensors::_Internal::gyroscope(const AmurSensors* msg) {
  return *msg->gyroscope_;
}
const ::AmurSensors_Magnitometer&
AmurSensors::_Internal::magnitometer(const AmurSensors* msg) {
  return *msg->magnitometer_;
}
const ::AmurSensors_WheelEncoders&
AmurSensors::_Internal::wheelencoders(const AmurSensors* msg) {
  return *msg->wheelencoders_;
}
const ::AmurSensors_HandEncoders&
AmurSensors::_Internal::handencoders(const AmurSensors* msg) {
  return *msg->handencoders_;
}
const ::AmurSensors_Temperature&
AmurSensors::_Internal::temperature(const AmurSensors* msg) {
  return *msg->temperature_;
}
const ::AmurSensors_Misc&
AmurSensors::_Internal::misc(const AmurSensors* msg) {
  return *msg->misc_;
}
AmurSensors::AmurSensors()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AmurSensors)
}
AmurSensors::AmurSensors(const AmurSensors& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_accelerometer()) {
    accelerometer_ = new ::AmurSensors_Accelerometer(*from.accelerometer_);
  } else {
    accelerometer_ = nullptr;
  }
  if (from._internal_has_gyroscope()) {
    gyroscope_ = new ::AmurSensors_Gyroscope(*from.gyroscope_);
  } else {
    gyroscope_ = nullptr;
  }
  if (from._internal_has_magnitometer()) {
    magnitometer_ = new ::AmurSensors_Magnitometer(*from.magnitometer_);
  } else {
    magnitometer_ = nullptr;
  }
  if (from._internal_has_wheelencoders()) {
    wheelencoders_ = new ::AmurSensors_WheelEncoders(*from.wheelencoders_);
  } else {
    wheelencoders_ = nullptr;
  }
  if (from._internal_has_handencoders()) {
    handencoders_ = new ::AmurSensors_HandEncoders(*from.handencoders_);
  } else {
    handencoders_ = nullptr;
  }
  if (from._internal_has_temperature()) {
    temperature_ = new ::AmurSensors_Temperature(*from.temperature_);
  } else {
    temperature_ = nullptr;
  }
  if (from._internal_has_misc()) {
    misc_ = new ::AmurSensors_Misc(*from.misc_);
  } else {
    misc_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:AmurSensors)
}

void AmurSensors::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AmurSensors_sensors_2eproto.base);
  ::memset(&accelerometer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&misc_) -
      reinterpret_cast<char*>(&accelerometer_)) + sizeof(misc_));
}

AmurSensors::~AmurSensors() {
  // @@protoc_insertion_point(destructor:AmurSensors)
  SharedDtor();
}

void AmurSensors::SharedDtor() {
  if (this != internal_default_instance()) delete accelerometer_;
  if (this != internal_default_instance()) delete gyroscope_;
  if (this != internal_default_instance()) delete magnitometer_;
  if (this != internal_default_instance()) delete wheelencoders_;
  if (this != internal_default_instance()) delete handencoders_;
  if (this != internal_default_instance()) delete temperature_;
  if (this != internal_default_instance()) delete misc_;
}

void AmurSensors::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AmurSensors& AmurSensors::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AmurSensors_sensors_2eproto.base);
  return *internal_default_instance();
}


void AmurSensors::Clear() {
// @@protoc_insertion_point(message_clear_start:AmurSensors)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && accelerometer_ != nullptr) {
    delete accelerometer_;
  }
  accelerometer_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && gyroscope_ != nullptr) {
    delete gyroscope_;
  }
  gyroscope_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && magnitometer_ != nullptr) {
    delete magnitometer_;
  }
  magnitometer_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && wheelencoders_ != nullptr) {
    delete wheelencoders_;
  }
  wheelencoders_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && handencoders_ != nullptr) {
    delete handencoders_;
  }
  handencoders_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && temperature_ != nullptr) {
    delete temperature_;
  }
  temperature_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && misc_ != nullptr) {
    delete misc_;
  }
  misc_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AmurSensors::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .AmurSensors.Accelerometer accelerometer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_accelerometer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AmurSensors.Gyroscope gyroscope = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gyroscope(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AmurSensors.Magnitometer magnitometer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_magnitometer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AmurSensors.WheelEncoders wheelEncoders = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_wheelencoders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AmurSensors.HandEncoders handEncoders = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_handencoders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AmurSensors.Temperature temperature = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_temperature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AmurSensors.Misc misc = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_misc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AmurSensors::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AmurSensors)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AmurSensors.Accelerometer accelerometer = 1;
  if (this->has_accelerometer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::accelerometer(this), target, stream);
  }

  // .AmurSensors.Gyroscope gyroscope = 2;
  if (this->has_gyroscope()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::gyroscope(this), target, stream);
  }

  // .AmurSensors.Magnitometer magnitometer = 3;
  if (this->has_magnitometer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::magnitometer(this), target, stream);
  }

  // .AmurSensors.WheelEncoders wheelEncoders = 4;
  if (this->has_wheelencoders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::wheelencoders(this), target, stream);
  }

  // .AmurSensors.HandEncoders handEncoders = 5;
  if (this->has_handencoders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::handencoders(this), target, stream);
  }

  // .AmurSensors.Temperature temperature = 6;
  if (this->has_temperature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::temperature(this), target, stream);
  }

  // .AmurSensors.Misc misc = 7;
  if (this->has_misc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::misc(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AmurSensors)
  return target;
}

size_t AmurSensors::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AmurSensors)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .AmurSensors.Accelerometer accelerometer = 1;
  if (this->has_accelerometer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *accelerometer_);
  }

  // .AmurSensors.Gyroscope gyroscope = 2;
  if (this->has_gyroscope()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gyroscope_);
  }

  // .AmurSensors.Magnitometer magnitometer = 3;
  if (this->has_magnitometer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *magnitometer_);
  }

  // .AmurSensors.WheelEncoders wheelEncoders = 4;
  if (this->has_wheelencoders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *wheelencoders_);
  }

  // .AmurSensors.HandEncoders handEncoders = 5;
  if (this->has_handencoders()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *handencoders_);
  }

  // .AmurSensors.Temperature temperature = 6;
  if (this->has_temperature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *temperature_);
  }

  // .AmurSensors.Misc misc = 7;
  if (this->has_misc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *misc_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AmurSensors::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AmurSensors)
  GOOGLE_DCHECK_NE(&from, this);
  const AmurSensors* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AmurSensors>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AmurSensors)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AmurSensors)
    MergeFrom(*source);
  }
}

void AmurSensors::MergeFrom(const AmurSensors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AmurSensors)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_accelerometer()) {
    _internal_mutable_accelerometer()->::AmurSensors_Accelerometer::MergeFrom(from._internal_accelerometer());
  }
  if (from.has_gyroscope()) {
    _internal_mutable_gyroscope()->::AmurSensors_Gyroscope::MergeFrom(from._internal_gyroscope());
  }
  if (from.has_magnitometer()) {
    _internal_mutable_magnitometer()->::AmurSensors_Magnitometer::MergeFrom(from._internal_magnitometer());
  }
  if (from.has_wheelencoders()) {
    _internal_mutable_wheelencoders()->::AmurSensors_WheelEncoders::MergeFrom(from._internal_wheelencoders());
  }
  if (from.has_handencoders()) {
    _internal_mutable_handencoders()->::AmurSensors_HandEncoders::MergeFrom(from._internal_handencoders());
  }
  if (from.has_temperature()) {
    _internal_mutable_temperature()->::AmurSensors_Temperature::MergeFrom(from._internal_temperature());
  }
  if (from.has_misc()) {
    _internal_mutable_misc()->::AmurSensors_Misc::MergeFrom(from._internal_misc());
  }
}

void AmurSensors::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AmurSensors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AmurSensors::CopyFrom(const AmurSensors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AmurSensors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AmurSensors::IsInitialized() const {
  return true;
}

void AmurSensors::InternalSwap(AmurSensors* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(accelerometer_, other->accelerometer_);
  swap(gyroscope_, other->gyroscope_);
  swap(magnitometer_, other->magnitometer_);
  swap(wheelencoders_, other->wheelencoders_);
  swap(handencoders_, other->handencoders_);
  swap(temperature_, other->temperature_);
  swap(misc_, other->misc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AmurSensors::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AmurSensors_Accelerometer* Arena::CreateMaybeMessage< ::AmurSensors_Accelerometer >(Arena* arena) {
  return Arena::CreateInternal< ::AmurSensors_Accelerometer >(arena);
}
template<> PROTOBUF_NOINLINE ::AmurSensors_Gyroscope* Arena::CreateMaybeMessage< ::AmurSensors_Gyroscope >(Arena* arena) {
  return Arena::CreateInternal< ::AmurSensors_Gyroscope >(arena);
}
template<> PROTOBUF_NOINLINE ::AmurSensors_Magnitometer* Arena::CreateMaybeMessage< ::AmurSensors_Magnitometer >(Arena* arena) {
  return Arena::CreateInternal< ::AmurSensors_Magnitometer >(arena);
}
template<> PROTOBUF_NOINLINE ::AmurSensors_WheelEncoders* Arena::CreateMaybeMessage< ::AmurSensors_WheelEncoders >(Arena* arena) {
  return Arena::CreateInternal< ::AmurSensors_WheelEncoders >(arena);
}
template<> PROTOBUF_NOINLINE ::AmurSensors_HandEncoders* Arena::CreateMaybeMessage< ::AmurSensors_HandEncoders >(Arena* arena) {
  return Arena::CreateInternal< ::AmurSensors_HandEncoders >(arena);
}
template<> PROTOBUF_NOINLINE ::AmurSensors_Temperature* Arena::CreateMaybeMessage< ::AmurSensors_Temperature >(Arena* arena) {
  return Arena::CreateInternal< ::AmurSensors_Temperature >(arena);
}
template<> PROTOBUF_NOINLINE ::AmurSensors_WheelCurrent* Arena::CreateMaybeMessage< ::AmurSensors_WheelCurrent >(Arena* arena) {
  return Arena::CreateInternal< ::AmurSensors_WheelCurrent >(arena);
}
template<> PROTOBUF_NOINLINE ::AmurSensors_HandCurrent* Arena::CreateMaybeMessage< ::AmurSensors_HandCurrent >(Arena* arena) {
  return Arena::CreateInternal< ::AmurSensors_HandCurrent >(arena);
}
template<> PROTOBUF_NOINLINE ::AmurSensors_Misc* Arena::CreateMaybeMessage< ::AmurSensors_Misc >(Arena* arena) {
  return Arena::CreateInternal< ::AmurSensors_Misc >(arena);
}
template<> PROTOBUF_NOINLINE ::AmurSensors* Arena::CreateMaybeMessage< ::AmurSensors >(Arena* arena) {
  return Arena::CreateInternal< ::AmurSensors >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
